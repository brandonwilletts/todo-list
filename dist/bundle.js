(()=>{"use strict";var n={208:(n,e,t)=>{t.d(e,{A:()=>s});var r=t(354),o=t.n(r),a=t(314),i=t.n(a)()(o());i.push([n.id,":root {\n    font-family: Arial, Helvetica, sans-serif;\n    color: var(--text);\n    --sidebar-width: 260px;\n    --sidebar-bgcolor: #fbfaf6;\n    --main-bgcolor: white;\n    --red: #dd4b40;\n    --darkred: #c04037;\n    --red-trans: rgb(221, 75, 64, 0.2);\n    --red-trans-hover: rgb(221, 75, 64, 0.4);\n    --orange: rgb(232, 101, 0);\n    --orange-trans: rgb(232, 101, 0, 0.2);\n    --orange-trans-hover: rgb(232, 101, 0, 0.4);\n    --green: rgb(0, 157, 34);\n    --green-trans: rgb(0, 157, 34, 0.2);\n    --green-trans-hover: rgb(0, 157, 34, 0.4);\n    --light-grey: lightgrey;\n    --grey: grey;\n    --text: #111111;\n    --icon: #454545;\n    --charcoal: #454545;\n    --charcoal-trans: rgb(149, 149, 149, 0.2);\n    --charcoal-trans-hover: rgb(149, 149, 149, 0.4);\n    --btn-sidebar-hover: rgb(248,233,227, 0.4);\n    --btn-sidebar-focus: rgb(248,233,227, 1);\n    --grey: #ebebeb;\n    --darkgrey: #e0e0e0;\n}\n\n.material-symbols-outlined {\n    color: var(--icon);\n}\n\n.material-symbols-outlined.md-18 {\n    font-size: 18px;\n}\n\n.material-symbols-outlined.md-24 {\n    font-size: 24px;\n}\n\nh1, h2, h3, h4, h5, h6 {\n    margin: 0;\n    padding: 0;\n    line-height: 1;\n}\n\np {\n    margin: 0;\n    padding: 0;\n    line-height: 1.5;\n}\n\na {\n    text-decoration: none;\n    color: var(--red);\n}\n\na:hover {\n    font-weight: bold;\n}\n\nbody {\n    padding: 0;\n    margin: 0;\n}\n\n.container {\n    display: grid;\n    grid-template-columns: auto 1fr;\n    grid-template-rows: 1fr;\n    min-height: 100vh;\n}\n\n/* Sidebar */\n\n#sidebar {\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-template-rows: auto 1fr auto;\n    gap: 32px;\n    width: var(--sidebar-width);\n    overflow-y: auto;\n    scrollbar-width: none;\n    background-color: var(--sidebar-bgcolor);\n    padding: 32px 16px 16px 16px;\n}\n\n.sidebar-header {\n    display: flex;\n    justify-content: space-between;\n}\n\n.logo {\n    display: flex;\n    flex-direction: row;\n    gap: 4px;\n}\n\n.logo .material-symbols-outlined {\n    color: var(--red);\n}\n\n.sidebar-header h1 {\n    color: var(--red);\n    font-size: 24px;\n    font-weight: 600;\n}\n\n.tasks-container {\n    display: flex;\n    flex-direction: column;\n}\n\n.sidebar-body {\n    display: flex;\n    flex-direction: column;\n    gap: 24px;\n    font-size: 12pt;\n}\n\n.btn-add {\n    color: var(--red);\n    font-weight: 600;\n}\n\n.btn-add .material-symbols-outlined {\n    color: var(--red);\n}\n\n.task-heading {\n    padding: 8px 12px;\n    font-size: 12pt;\n    font-weight: 600;\n}\n\n.btn-add,\n.btn-sidebar {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: left;\n    padding: 8px 12px;\n    background-color: var(--sidebar-bgcolor);\n    border-radius: 8px;\n    border: none;\n    font-size: 12pt;\n    gap: 8px;\n}\n\n.btn-sidebar:hover,\n.btn-add:hover {\n    background-color: var(--btn-sidebar-hover);\n    cursor: pointer;\n}\n\n.btn-sidebar div {\n    width: 100%;\n    text-align: left;\n}\n\n.btn-sidebar:focus {\n    background-color: var(--btn-sidebar-focus);\n    color: var(--red);\n}\n\n.btn-sidebar:focus .material-symbols-outlined {\n    color: var(--red);\n}\n\n.btn-sidebar:hover .btn-delete-project {\n    display: inline-block;\n}\n\n.btn-delete-project {\n    color: var(--red);\n    display: none;\n}\n\n.btn-delete-project:hover {\n    color: var(--darkred);\n}\n\n.sidebar-footer {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    font-size: 8pt;\n}\n\n#reset-demo-data {\n    color: var(--red);\n}\n\n#reset-demo-data:hover {\n    cursor: pointer;\n    font-weight: bold;\n}\n\n/* Main */\n\n#main {\n    display: flex;\n    justify-content: center;\n    background-color: var(--main-bgcolor);\n    padding: 32px 16px 16px 16px;\n}\n\n#content {\n    display: flex;\n    flex-direction: column;\n    gap: 32px;\n    width: clamp(200px, 100%, 768px);\n}\n\n.div-task {\n    display: grid;\n    grid-template-columns: 20px 1fr auto;\n    padding: 24px 0;\n    gap: 16px;\n    border-top: 1px solid var(--light-grey);\n}\n\n.div-task:hover .btn-edit-task,\n.div-task:hover .btn-delete-task {\n    display: inline-block;\n}\n\n.btn-edit-task,\n.btn-delete-task {\n    display: none;\n}\n\n.btn-edit-task {\n    color: grey;\n    margin-right: 16px;\n}\n\n.btn-delete-task {\n    color: var(--red);\n}\n\n.btn-edit-task:hover {\n    cursor: pointer;\n    color: var(--icon);\n}\n\n.btn-delete-task:hover {\n    cursor: pointer;\n    color: var(--darkred);\n}\n\n.div-task p {\n    font-size: 10pt;\n    padding: 8px 0;\n}\n\n.div-task span {\n    font-size: 9pt;\n}\n\n.red-text {\n    color: var(--red);\n}\n\n.div-task span .material-symbols-outlined {\n    color: var(--grey);\n}\n\n.btn-priority {\n    aspect-ratio: 1;\n    width: 18px;\n    border: 1.5px solid;\n    border-radius: 100%;\n}\n\n.btn-priority:hover {\n    cursor: pointer;\n}\n\n.priority-high {\n    color: var(--red);\n    background-color: var(--red-trans);\n}\n\n.priority-high:hover {\n    background-color: var(--red-trans-hover);\n}\n\n.priority-medium {\n    color: var(--orange);\n    background-color: var(--orange-trans);\n}\n\n.priority-medium:hover {\n    background-color: var(--orange-trans-hover);\n}\n\n.priority-low {\n    color: var(--green);\n    background-color: var(--green-trans);\n}\n\n.priority-low:hover {\n    background-color: var(--green-trans-hover);\n}\n\n.priority-none {\n    color: var(--charcoal);\n    background-color: var(--charcoal-trans);\n}\n\n.priority-none:hover {\n    background-color: var(--charcoal-trans-hover);\n}\n\n.task-title {\n    font-size: 12pt;\n}\n\n.project-link {\n    background-color: var(--main-bgcolor);\n    padding: 0;\n    border: none;\n    font-size: 10pt;\n    color: var(--red);\n}\n\n.project-link:hover {\n    font-weight: bold;\n    cursor: pointer;\n}\n\n.div-col {\n    display: flex;\n    flex-direction: column;\n}\n\n.span-row {\n    display: flex;\n    align-items: center;\n    gap: 4px;\n}\n\n/* New Project Modal */\n\ndialog {\n    padding: 32px;\n    border: 1px solid lightgrey;\n    border-radius: 8px;\n    min-width: 320px;\n}\n\ndialog h2 {\n    text-align: center;\n}\n\ndialog label {\n    font-size: 10pt;\n    font-weight: bold;\n}\n\ndialog form {\n    display: flex;\n    flex-direction: column;\n    gap: 48px;\n}\n\ndialog[open]::backdrop {\n    background-color: rgb(0 0 0 / 50%);\n}\n\nform > div {\n    display: flex;\n    flex-direction: column;\n    gap: 4px;\n}\n\nform > div:last-child {\n    flex-direction: row;\n    justify-content: center;\n    gap: 8px;\n}\n\nform > div:last-child button {\n    width: 50%;\n}\n\ninput {\n    font-family: Arial, Helvetica, sans-serif;\n    padding: 8px;\n    border-radius: 8px;\n    border: 1px solid lightgrey;\n    min-width: 300px;\n}\n\n.btn-red {\n    color: white;\n    background-color: var(--red);\n    font-weight: 600;\n    padding: 8px 16px;\n    border: none;\n    border-radius: 8px;\n}\n\n.btn-red:hover {\n    background-color: var(--darkred);\n    cursor: pointer;\n}\n\n.btn-grey {\n    background-color: var(--grey);\n    padding: 8px 16px;\n    border: none;\n    border-radius: 8px;\n}\n\n.btn-grey:hover {\n    background-color: var(--darkgrey);\n    cursor: pointer;\n}\n\ntextarea {\n    font-family: Arial, Helvetica, sans-serif;\n    resize: none;\n    padding: 8px;\n    border-radius: 8px;\n    border: 1px solid lightgrey;\n    min-width: 300px;\n}\n\nselect {\n    font-family: Arial, Helvetica, sans-serif;\n    padding: 8px;\n    border-radius: 8px;\n    border: 1px solid lightgrey;\n    min-width: 300px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:[":root {\n    font-family: Arial, Helvetica, sans-serif;\n    color: var(--text);\n    --sidebar-width: 260px;\n    --sidebar-bgcolor: #fbfaf6;\n    --main-bgcolor: white;\n    --red: #dd4b40;\n    --darkred: #c04037;\n    --red-trans: rgb(221, 75, 64, 0.2);\n    --red-trans-hover: rgb(221, 75, 64, 0.4);\n    --orange: rgb(232, 101, 0);\n    --orange-trans: rgb(232, 101, 0, 0.2);\n    --orange-trans-hover: rgb(232, 101, 0, 0.4);\n    --green: rgb(0, 157, 34);\n    --green-trans: rgb(0, 157, 34, 0.2);\n    --green-trans-hover: rgb(0, 157, 34, 0.4);\n    --light-grey: lightgrey;\n    --grey: grey;\n    --text: #111111;\n    --icon: #454545;\n    --charcoal: #454545;\n    --charcoal-trans: rgb(149, 149, 149, 0.2);\n    --charcoal-trans-hover: rgb(149, 149, 149, 0.4);\n    --btn-sidebar-hover: rgb(248,233,227, 0.4);\n    --btn-sidebar-focus: rgb(248,233,227, 1);\n    --grey: #ebebeb;\n    --darkgrey: #e0e0e0;\n}\n\n.material-symbols-outlined {\n    color: var(--icon);\n}\n\n.material-symbols-outlined.md-18 {\n    font-size: 18px;\n}\n\n.material-symbols-outlined.md-24 {\n    font-size: 24px;\n}\n\nh1, h2, h3, h4, h5, h6 {\n    margin: 0;\n    padding: 0;\n    line-height: 1;\n}\n\np {\n    margin: 0;\n    padding: 0;\n    line-height: 1.5;\n}\n\na {\n    text-decoration: none;\n    color: var(--red);\n}\n\na:hover {\n    font-weight: bold;\n}\n\nbody {\n    padding: 0;\n    margin: 0;\n}\n\n.container {\n    display: grid;\n    grid-template-columns: auto 1fr;\n    grid-template-rows: 1fr;\n    min-height: 100vh;\n}\n\n/* Sidebar */\n\n#sidebar {\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-template-rows: auto 1fr auto;\n    gap: 32px;\n    width: var(--sidebar-width);\n    overflow-y: auto;\n    scrollbar-width: none;\n    background-color: var(--sidebar-bgcolor);\n    padding: 32px 16px 16px 16px;\n}\n\n.sidebar-header {\n    display: flex;\n    justify-content: space-between;\n}\n\n.logo {\n    display: flex;\n    flex-direction: row;\n    gap: 4px;\n}\n\n.logo .material-symbols-outlined {\n    color: var(--red);\n}\n\n.sidebar-header h1 {\n    color: var(--red);\n    font-size: 24px;\n    font-weight: 600;\n}\n\n.tasks-container {\n    display: flex;\n    flex-direction: column;\n}\n\n.sidebar-body {\n    display: flex;\n    flex-direction: column;\n    gap: 24px;\n    font-size: 12pt;\n}\n\n.btn-add {\n    color: var(--red);\n    font-weight: 600;\n}\n\n.btn-add .material-symbols-outlined {\n    color: var(--red);\n}\n\n.task-heading {\n    padding: 8px 12px;\n    font-size: 12pt;\n    font-weight: 600;\n}\n\n.btn-add,\n.btn-sidebar {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: left;\n    padding: 8px 12px;\n    background-color: var(--sidebar-bgcolor);\n    border-radius: 8px;\n    border: none;\n    font-size: 12pt;\n    gap: 8px;\n}\n\n.btn-sidebar:hover,\n.btn-add:hover {\n    background-color: var(--btn-sidebar-hover);\n    cursor: pointer;\n}\n\n.btn-sidebar div {\n    width: 100%;\n    text-align: left;\n}\n\n.btn-sidebar:focus {\n    background-color: var(--btn-sidebar-focus);\n    color: var(--red);\n}\n\n.btn-sidebar:focus .material-symbols-outlined {\n    color: var(--red);\n}\n\n.btn-sidebar:hover .btn-delete-project {\n    display: inline-block;\n}\n\n.btn-delete-project {\n    color: var(--red);\n    display: none;\n}\n\n.btn-delete-project:hover {\n    color: var(--darkred);\n}\n\n.sidebar-footer {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    font-size: 8pt;\n}\n\n#reset-demo-data {\n    color: var(--red);\n}\n\n#reset-demo-data:hover {\n    cursor: pointer;\n    font-weight: bold;\n}\n\n/* Main */\n\n#main {\n    display: flex;\n    justify-content: center;\n    background-color: var(--main-bgcolor);\n    padding: 32px 16px 16px 16px;\n}\n\n#content {\n    display: flex;\n    flex-direction: column;\n    gap: 32px;\n    width: clamp(200px, 100%, 768px);\n}\n\n.div-task {\n    display: grid;\n    grid-template-columns: 20px 1fr auto;\n    padding: 24px 0;\n    gap: 16px;\n    border-top: 1px solid var(--light-grey);\n}\n\n.div-task:hover .btn-edit-task,\n.div-task:hover .btn-delete-task {\n    display: inline-block;\n}\n\n.btn-edit-task,\n.btn-delete-task {\n    display: none;\n}\n\n.btn-edit-task {\n    color: grey;\n    margin-right: 16px;\n}\n\n.btn-delete-task {\n    color: var(--red);\n}\n\n.btn-edit-task:hover {\n    cursor: pointer;\n    color: var(--icon);\n}\n\n.btn-delete-task:hover {\n    cursor: pointer;\n    color: var(--darkred);\n}\n\n.div-task p {\n    font-size: 10pt;\n    padding: 8px 0;\n}\n\n.div-task span {\n    font-size: 9pt;\n}\n\n.red-text {\n    color: var(--red);\n}\n\n.div-task span .material-symbols-outlined {\n    color: var(--grey);\n}\n\n.btn-priority {\n    aspect-ratio: 1;\n    width: 18px;\n    border: 1.5px solid;\n    border-radius: 100%;\n}\n\n.btn-priority:hover {\n    cursor: pointer;\n}\n\n.priority-high {\n    color: var(--red);\n    background-color: var(--red-trans);\n}\n\n.priority-high:hover {\n    background-color: var(--red-trans-hover);\n}\n\n.priority-medium {\n    color: var(--orange);\n    background-color: var(--orange-trans);\n}\n\n.priority-medium:hover {\n    background-color: var(--orange-trans-hover);\n}\n\n.priority-low {\n    color: var(--green);\n    background-color: var(--green-trans);\n}\n\n.priority-low:hover {\n    background-color: var(--green-trans-hover);\n}\n\n.priority-none {\n    color: var(--charcoal);\n    background-color: var(--charcoal-trans);\n}\n\n.priority-none:hover {\n    background-color: var(--charcoal-trans-hover);\n}\n\n.task-title {\n    font-size: 12pt;\n}\n\n.project-link {\n    background-color: var(--main-bgcolor);\n    padding: 0;\n    border: none;\n    font-size: 10pt;\n    color: var(--red);\n}\n\n.project-link:hover {\n    font-weight: bold;\n    cursor: pointer;\n}\n\n.div-col {\n    display: flex;\n    flex-direction: column;\n}\n\n.span-row {\n    display: flex;\n    align-items: center;\n    gap: 4px;\n}\n\n/* New Project Modal */\n\ndialog {\n    padding: 32px;\n    border: 1px solid lightgrey;\n    border-radius: 8px;\n    min-width: 320px;\n}\n\ndialog h2 {\n    text-align: center;\n}\n\ndialog label {\n    font-size: 10pt;\n    font-weight: bold;\n}\n\ndialog form {\n    display: flex;\n    flex-direction: column;\n    gap: 48px;\n}\n\ndialog[open]::backdrop {\n    background-color: rgb(0 0 0 / 50%);\n}\n\nform > div {\n    display: flex;\n    flex-direction: column;\n    gap: 4px;\n}\n\nform > div:last-child {\n    flex-direction: row;\n    justify-content: center;\n    gap: 8px;\n}\n\nform > div:last-child button {\n    width: 50%;\n}\n\ninput {\n    font-family: Arial, Helvetica, sans-serif;\n    padding: 8px;\n    border-radius: 8px;\n    border: 1px solid lightgrey;\n    min-width: 300px;\n}\n\n.btn-red {\n    color: white;\n    background-color: var(--red);\n    font-weight: 600;\n    padding: 8px 16px;\n    border: none;\n    border-radius: 8px;\n}\n\n.btn-red:hover {\n    background-color: var(--darkred);\n    cursor: pointer;\n}\n\n.btn-grey {\n    background-color: var(--grey);\n    padding: 8px 16px;\n    border: none;\n    border-radius: 8px;\n}\n\n.btn-grey:hover {\n    background-color: var(--darkgrey);\n    cursor: pointer;\n}\n\ntextarea {\n    font-family: Arial, Helvetica, sans-serif;\n    resize: none;\n    padding: 8px;\n    border-radius: 8px;\n    border: 1px solid lightgrey;\n    min-width: 300px;\n}\n\nselect {\n    font-family: Arial, Helvetica, sans-serif;\n    padding: 8px;\n    border-radius: 8px;\n    border: 1px solid lightgrey;\n    min-width: 300px;\n}"],sourceRoot:""}]);const s=i},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(i[d]=!0)}for(var c=0;c<n.length;c++){var l=[].concat(n[c]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var d=n[s],c=r.base?d[0]+r.base:d[0],l=a[c]||0,A="".concat(c," ").concat(l);a[c]=l+1;var u=t(A),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var m=o(p,r);r.byIndex=s,e.splice(s,0,{identifier:A,updater:m,references:1})}i.push(A)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var d=r(n,o),c=0;c<a.length;c++){var l=t(a[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=d}}},659:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(72),e=t.n(n),r=t(825),o=t.n(r),a=t(659),i=t.n(a),s=t(56),d=t.n(s),c=t(540),l=t.n(c),A=t(113),u=t.n(A),p=t(208),m={};m.styleTagTransform=u(),m.setAttributes=d(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=l(),e()(p.A,m),p.A&&p.A.locals&&p.A.locals;const h={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function g(n){return(e={})=>{const t=e.width?String(e.width):n.defaultWidth;return n.formats[t]||n.formats[n.defaultWidth]}}const f={date:g({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:g({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:g({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},b={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function C(n){return(e,t)=>{let r;if("formatting"===(t?.context?String(t.context):"standalone")&&n.formattingValues){const e=n.defaultFormattingWidth||n.defaultWidth,o=t?.width?String(t.width):e;r=n.formattingValues[o]||n.formattingValues[e]}else{const e=n.defaultWidth,o=t?.width?String(t.width):n.defaultWidth;r=n.values[o]||n.values[e]}return r[n.argumentCallback?n.argumentCallback(e):e]}}const y={ordinalNumber:(n,e)=>{const t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:C({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:C({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:n=>n-1}),month:C({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:C({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:C({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function v(n){return(e,t={})=>{const r=t.width,o=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],a=e.match(o);if(!a)return null;const i=a[0],s=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],d=Array.isArray(s)?function(n,e){for(let e=0;e<n.length;e++)if(n[e].test(i))return e}(s):function(n,e){for(const e in n)if(Object.prototype.hasOwnProperty.call(n,e)&&n[e].test(i))return e}(s);let c;return c=n.valueCallback?n.valueCallback(d):d,c=t.valueCallback?t.valueCallback(c):c,{value:c,rest:e.slice(i.length)}}}const I={ordinalNumber:(k={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:n=>parseInt(n,10)},(n,e={})=>{const t=n.match(k.matchPattern);if(!t)return null;const r=t[0],o=n.match(k.parsePattern);if(!o)return null;let a=k.valueCallback?k.valueCallback(o[0]):o[0];return a=e.valueCallback?e.valueCallback(a):a,{value:a,rest:n.slice(r.length)}}),era:v({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:v({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:n=>n+1}),month:v({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:v({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:v({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var k;const B={code:"en-US",formatDistance:(n,e,t)=>{let r;const o=h[n];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),t?.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:f,formatRelative:(n,e,t,r)=>b[n],localize:y,match:I,options:{weekStartsOn:0,firstWeekContainsDate:1}};let w={};function x(){return w}Math.pow(10,8);const E=6048e5,S=864e5;function M(n){const e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new n.constructor(+n):"number"==typeof n||"[object Number]"===e||"string"==typeof n||"[object String]"===e?new Date(n):new Date(NaN)}function j(n){const e=M(n);return e.setHours(0,0,0,0),e}function P(n){const e=M(n),t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),+n-+t}function q(n,e){return n instanceof Date?new n.constructor(e):new Date(e)}function D(n){const e=M(n);return function(n,e){const t=j(n),r=j(e),o=+t-P(t),a=+r-P(r);return Math.round((o-a)/S)}(e,function(n){const e=M(n),t=q(n,0);return t.setFullYear(e.getFullYear(),0,1),t.setHours(0,0,0,0),t}(e))+1}function T(n,e){const t=x(),r=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??t.weekStartsOn??t.locale?.options?.weekStartsOn??0,o=M(n),a=o.getDay(),i=(a<r?7:0)+a-r;return o.setDate(o.getDate()-i),o.setHours(0,0,0,0),o}function L(n){return T(n,{weekStartsOn:1})}function Y(n){const e=M(n),t=e.getFullYear(),r=q(n,0);r.setFullYear(t+1,0,4),r.setHours(0,0,0,0);const o=L(r),a=q(n,0);a.setFullYear(t,0,4),a.setHours(0,0,0,0);const i=L(a);return e.getTime()>=o.getTime()?t+1:e.getTime()>=i.getTime()?t:t-1}function z(n){const e=M(n),t=+L(e)-+function(n){const e=Y(n),t=q(n,0);return t.setFullYear(e,0,4),t.setHours(0,0,0,0),L(t)}(e);return Math.round(t/E)+1}function W(n,e){const t=M(n),r=t.getFullYear(),o=x(),a=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??o.firstWeekContainsDate??o.locale?.options?.firstWeekContainsDate??1,i=q(n,0);i.setFullYear(r+1,0,a),i.setHours(0,0,0,0);const s=T(i,e),d=q(n,0);d.setFullYear(r,0,a),d.setHours(0,0,0,0);const c=T(d,e);return t.getTime()>=s.getTime()?r+1:t.getTime()>=c.getTime()?r:r-1}function N(n,e){const t=M(n),r=+T(t,e)-+function(n,e){const t=x(),r=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??t.firstWeekContainsDate??t.locale?.options?.firstWeekContainsDate??1,o=W(n,e),a=q(n,0);return a.setFullYear(o,0,r),a.setHours(0,0,0,0),T(a,e)}(t,e);return Math.round(r/E)+1}function O(n,e){return(n<0?"-":"")+Math.abs(n).toString().padStart(e,"0")}const H={y(n,e){const t=n.getFullYear(),r=t>0?t:1-t;return O("yy"===e?r%100:r,e.length)},M(n,e){const t=n.getMonth();return"M"===e?String(t+1):O(t+1,2)},d:(n,e)=>O(n.getDate(),e.length),a(n,e){const t=n.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.toUpperCase();case"aaa":return t;case"aaaaa":return t[0];default:return"am"===t?"a.m.":"p.m."}},h:(n,e)=>O(n.getHours()%12||12,e.length),H:(n,e)=>O(n.getHours(),e.length),m:(n,e)=>O(n.getMinutes(),e.length),s:(n,e)=>O(n.getSeconds(),e.length),S(n,e){const t=e.length,r=n.getMilliseconds();return O(Math.trunc(r*Math.pow(10,t-3)),e.length)}},F={G:function(n,e,t){const r=n.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(n,e,t){if("yo"===e){const e=n.getFullYear(),r=e>0?e:1-e;return t.ordinalNumber(r,{unit:"year"})}return H.y(n,e)},Y:function(n,e,t,r){const o=W(n,r),a=o>0?o:1-o;return"YY"===e?O(a%100,2):"Yo"===e?t.ordinalNumber(a,{unit:"year"}):O(a,e.length)},R:function(n,e){return O(Y(n),e.length)},u:function(n,e){return O(n.getFullYear(),e.length)},Q:function(n,e,t){const r=Math.ceil((n.getMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return O(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,e,t){const r=Math.ceil((n.getMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return O(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,e,t){const r=n.getMonth();switch(e){case"M":case"MM":return H.M(n,e);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(n,e,t){const r=n.getMonth();switch(e){case"L":return String(r+1);case"LL":return O(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(n,e,t,r){const o=N(n,r);return"wo"===e?t.ordinalNumber(o,{unit:"week"}):O(o,e.length)},I:function(n,e,t){const r=z(n);return"Io"===e?t.ordinalNumber(r,{unit:"week"}):O(r,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getDate(),{unit:"date"}):H.d(n,e)},D:function(n,e,t){const r=D(n);return"Do"===e?t.ordinalNumber(r,{unit:"dayOfYear"}):O(r,e.length)},E:function(n,e,t){const r=n.getDay();switch(e){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(n,e,t,r){const o=n.getDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return O(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},c:function(n,e,t,r){const o=n.getDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return O(a,e.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(o,{width:"narrow",context:"standalone"});case"cccccc":return t.day(o,{width:"short",context:"standalone"});default:return t.day(o,{width:"wide",context:"standalone"})}},i:function(n,e,t){const r=n.getDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return O(o,e.length);case"io":return t.ordinalNumber(o,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(n,e,t){const r=n.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,e,t){const r=n.getHours();let o;switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(n,e,t){const r=n.getHours();let o;switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){let e=n.getHours()%12;return 0===e&&(e=12),t.ordinalNumber(e,{unit:"hour"})}return H.h(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getHours(),{unit:"hour"}):H.H(n,e)},K:function(n,e,t){const r=n.getHours()%12;return"Ko"===e?t.ordinalNumber(r,{unit:"hour"}):O(r,e.length)},k:function(n,e,t){let r=n.getHours();return 0===r&&(r=24),"ko"===e?t.ordinalNumber(r,{unit:"hour"}):O(r,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getMinutes(),{unit:"minute"}):H.m(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getSeconds(),{unit:"second"}):H.s(n,e)},S:function(n,e){return H.S(n,e)},X:function(n,e,t){const r=n.getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return $(r);case"XXXX":case"XX":return U(r);default:return U(r,":")}},x:function(n,e,t){const r=n.getTimezoneOffset();switch(e){case"x":return $(r);case"xxxx":case"xx":return U(r);default:return U(r,":")}},O:function(n,e,t){const r=n.getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+Q(r,":");default:return"GMT"+U(r,":")}},z:function(n,e,t){const r=n.getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+Q(r,":");default:return"GMT"+U(r,":")}},t:function(n,e,t){return O(Math.trunc(n.getTime()/1e3),e.length)},T:function(n,e,t){return O(n.getTime(),e.length)}};function Q(n,e=""){const t=n>0?"-":"+",r=Math.abs(n),o=Math.trunc(r/60),a=r%60;return 0===a?t+String(o):t+String(o)+e+O(a,2)}function $(n,e){return n%60==0?(n>0?"-":"+")+O(Math.abs(n)/60,2):U(n,e)}function U(n,e=""){const t=n>0?"-":"+",r=Math.abs(n);return t+O(Math.trunc(r/60),2)+e+O(r%60,2)}const X=(n,e)=>{switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},Z=(n,e)=>{switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},G={p:Z,P:(n,e)=>{const t=n.match(/(P+)(p+)?/)||[],r=t[1],o=t[2];if(!o)return X(n,e);let a;switch(r){case"P":a=e.dateTime({width:"short"});break;case"PP":a=e.dateTime({width:"medium"});break;case"PPP":a=e.dateTime({width:"long"});break;default:a=e.dateTime({width:"full"})}return a.replace("{{date}}",X(r,e)).replace("{{time}}",Z(o,e))}},J=/^D+$/,R=/^Y+$/,V=["D","DD","YY","YYYY"];function _(n){if(!(e=n,e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)||"number"==typeof n))return!1;var e;const t=M(n);return!isNaN(Number(t))}const K=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,nn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,en=/^'([^]*?)'?$/,tn=/''/g,rn=/[a-zA-Z]/;function on(n,e,t){const r=x(),o=t?.locale??r.locale??B,a=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,i=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,s=M(n);if(!_(s))throw new RangeError("Invalid time value");let d=e.match(nn).map((n=>{const e=n[0];return"p"===e||"P"===e?(0,G[e])(n,o.formatLong):n})).join("").match(K).map((n=>{if("''"===n)return{isToken:!1,value:"'"};const e=n[0];if("'"===e)return{isToken:!1,value:an(n)};if(F[e])return{isToken:!0,value:n};if(e.match(rn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+e+"`");return{isToken:!1,value:n}}));o.localize.preprocessor&&(d=o.localize.preprocessor(s,d));const c={firstWeekContainsDate:a,weekStartsOn:i,locale:o};return d.map((r=>{if(!r.isToken)return r.value;const a=r.value;return(!t?.useAdditionalWeekYearTokens&&function(n){return R.test(n)}(a)||!t?.useAdditionalDayOfYearTokens&&function(n){return J.test(n)}(a))&&function(n,e,t){const r=function(n,e,t){const r="Y"===n[0]?"years":"days of the month";return`Use \`${n.toLowerCase()}\` instead of \`${n}\` (in \`${e}\`) for formatting ${r} to the input \`${t}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(n,e,t);if(console.warn(r),V.includes(n))throw new RangeError(r)}(a,e,String(n)),(0,F[a[0]])(s,a,o.localize,c)})).join("")}function an(n){const e=n.match(en);return e?e[1].replace(tn,"'"):n}function sn(){return localStorage.getItem("projectId")||localStorage.setItem("projectId",0),localStorage.getItem("projectId")}class dn{constructor(n){this.name=n,this.key=sn()}}function cn(n){const e=new dn(n);return localStorage.setItem(`project-${sn()}`,JSON.stringify(e)),function(){let n=localStorage.getItem("projectId");n++,localStorage.setItem("projectId",n)}(),e}function ln(){let n=[];for(let e=0;e<=sn();e++)localStorage.getItem(`project-${e}`)&&n.push(JSON.parse(localStorage.getItem(`project-${e}`)));return n}function An(n){localStorage.removeItem(`project-${n}`)}function un(){return localStorage.getItem("taskId")||localStorage.setItem("taskId",0),localStorage.getItem("taskId")}class pn{constructor(n,e,t,r,o,a,i){this.title=n,this.notes=e,this.dueDate=t,this.priority=r,this.project=ln().find((n=>n.key==o)),this.complete=a,this.key=i}}function mn(n,e,t,r,o,a=!1,i=un()){const s=new pn(n,e,t,r,o,a,i);return localStorage.setItem(`task-${un()}`,JSON.stringify(s)),function(){let n=localStorage.getItem("taskId");n++,localStorage.setItem("taskId",n)}(),s}function hn(n,e,t,r,o,a=!1,i=un()){const s=new pn(n,e,t,r,o,a,i);return localStorage.setItem(`task-${i}`,JSON.stringify(s)),s}function gn(){const n=[];for(let e=0;e<=un();e++)localStorage.getItem(`task-${e}`)&&n.push(JSON.parse(localStorage.getItem(`task-${e}`)));return n}function fn(n){let e=gn();return e=e.filter((e=>e.project&&e.project.key==n)),e}function bn(n){localStorage.removeItem(`task-${n}`)}function Cn(){const n=cn("Work"),e=cn("School"),t=cn("Personal"),r=cn("Other");mn("Finish TPS report","Submit to both Bobs",new Date,"High",n.key),mn("Study for mid-term","Make sure to review Chapters 4 and 5",new Date(2024,12,31),"Medium",e.key),mn("Buy groceries","Milk, bread, cheese, eggs",new Date(2024,3,15),"Low",t.key),mn("Get car serviced","Fairview Auto",new Date,"Medium",r.key),mn("See if Inception is playing","Invite Steve",new Date)}const yn=function(){function n(){const n=document.createElement("button");return n.classList.add("btn-red"),n.setAttribute("type","submit"),n.textContent="Save",n}function e(){const n=document.createElement("button");return n.classList.add("btn-grey"),n.setAttribute("id","cancel"),n.setAttribute("type","button"),n.textContent="Cancel",n}function t(n,e){const t=document.createElement("label");return t.setAttribute("for",n),t.textContent=e,t}function r(n,e){const t=document.createElement("input");return t.setAttribute("type",n),t.setAttribute("name",e),t.setAttribute("id",e),t}return{text:function(n){const e=document.createElement("p");return e.textContent=`${n}`,e},projectButton:function(n){const e=document.createElement("button");e.classList.add("btn-sidebar","btn-project"),e.setAttribute("data-key",n.key);const t=document.createElement("span");t.classList.add("material-symbols-outlined","md-18"),t.textContent="tag";const r=document.createElement("div");r.textContent=n.name;const o=document.createElement("span");return o.classList.add("material-symbols-outlined","md-18","btn-delete-project"),o.textContent="delete",e.appendChild(t),e.appendChild(r),e.appendChild(o),e},taskDisplay:function(n){const e=document.createElement("div");e.classList.add("div-task"),e.setAttribute("data-key",n.key);const t=document.createElement("span");switch(t.classList.add("material-symbols-outlined","md-18"),t.classList.add("btn-priority"),!0===n.complete?t.textContent="close":t.textContent="",n.priority){case"High":t.classList.add("priority-high");break;case"Medium":t.classList.add("priority-medium");break;case"Low":t.classList.add("priority-low");break;default:t.classList.add("priority-none")}e.appendChild(t);const r=document.createElement("div");r.classList.add("div-col"),e.appendChild(r);const o=document.createElement("h3");o.classList.add("task-title"),o.textContent=n.title,n.complete&&(o.style.cssText="text-decoration: line-through;"),r.appendChild(o);const a=document.createElement("p");a.textContent=n.notes,r.appendChild(a);const i=document.createElement("span");i.classList.add("span-row"),r.appendChild(i);const s=document.createElement("span");s.classList.add("material-symbols-outlined","md-12"),s.textContent="calendar_today",i.appendChild(s);const d=document.createElement("span");if(d.classList.add("red-text"),d.textContent=on(n.dueDate,"yyyy-MM-dd"),i.appendChild(d),n.project){const e=document.createElement("span");e.textContent=" | ",i.appendChild(e);const t=document.createElement("span");t.classList.add("material-symbols-outlined","md-12"),t.textContent="tag",i.appendChild(t);const r=document.createElement("button");r.classList.add("project-link"),r.setAttribute("data-key",n.project.key),r.textContent=n.project.name,i.appendChild(r)}const c=document.createElement("div");e.appendChild(c);const l=document.createElement("span");l.classList.add("material-symbols-outlined","md-18","btn-edit-task"),l.setAttribute("data-key",n.key),l.textContent="edit_square",c.appendChild(l);const A=document.createElement("span");return A.classList.add("material-symbols-outlined","md-18","btn-delete-task"),A.setAttribute("data-key",n.key),A.textContent="delete",c.appendChild(A),e},addProjectForm:function(){const o=document.createElement("form");o.setAttribute("id","add-project-form");const a=document.createElement("h2");a.textContent="Add Project",o.appendChild(a);const i=document.createElement("div");o.appendChild(i);const s=t("projectName","Name");i.appendChild(s);const d=r("text","projectName");d.setAttribute("required",!0),i.appendChild(d);const c=document.createElement("div");o.appendChild(c);const l=e();c.appendChild(l);const A=n();return c.appendChild(A),o},addTaskForm:function(o){const a=document.createElement("form");a.setAttribute("id","add-task-form");const i=document.createElement("h2");i.textContent="Add Task",a.appendChild(i);const s=document.createElement("div");a.appendChild(s);const d=t("taskTitle","Title");s.appendChild(d);const c=r("text","taskTitle");c.setAttribute("required",!0),s.appendChild(c);const l=t("taskNotes","Notes");s.appendChild(l);const A=document.createElement("textarea");A.setAttribute("name","taskNotes"),A.setAttribute("id","taskNotes"),A.setAttribute("rows","4"),s.appendChild(A);const u=t("taskDueDate","Due Date");s.appendChild(u);const p=r("date","taskDueDate");p.setAttribute("required",!0),s.appendChild(p);const m=t("taskPriority","Priority");s.appendChild(m);const h=document.createElement("select");h.setAttribute("name","taskPriority"),h.setAttribute("id","taskPriority");const g=["","Low","Medium","High"];for(let n=0;n<g.length;n++){const e=document.createElement("option");e.setAttribute("value",g[n]),e.textContent=g[n],h.appendChild(e)}s.appendChild(h);const f=t("taskProject","Project");s.appendChild(f);const b=document.createElement("select");b.setAttribute("name","taskProject"),b.setAttribute("id","taskProject");const C=document.createElement("option");b.appendChild(C);const y=ln();for(let n=0;n<y.length;n++){const e=document.createElement("option");e.setAttribute("value",y[n].key),e.textContent=y[n].name,b.appendChild(e)}s.appendChild(b);const v=document.createElement("div");a.appendChild(v);const I=e();v.appendChild(I);const k=n();return v.appendChild(k),o&&(i.textContent="Edit Task",c.value=o.title,A.value=o.notes,p.value=on(o.dueDate,"yyyy-MM-dd"),h.value=o.priority,o.project&&(b.value=o.project.key)),a}}}();let vn=[],In="";function kn(n,e){vn=n,In=e}function Bn(){const n=document.querySelector("#projects");n.textContent="";const e=ln();for(let t=0;t<e.length;t++){const r=yn.projectButton(e[t]);n.appendChild(r)}!function(){const n=document.querySelectorAll(".btn-project");for(let e=0;e<n.length;e++){const t=ln().find((t=>t.key==n[e].dataset.key)),r=n[e].dataset.key;n[e].addEventListener("click",(function(){kn(fn(r),`${t.name}`),wn()}))}}(),function(){const n=document.querySelectorAll(".btn-delete-project");for(let e=0;e<n.length;e++){const t=n[e].parentNode.dataset.key,r=fn(t);n[e].addEventListener("click",(function(){An(t);for(let n=0;n<r.length;n++)bn(r[n].key),wn();Bn()}))}}()}function wn(){const n=document.querySelector("#tasks");n.textContent="",document.querySelector("h2").textContent=`${In} (${vn.length})`;for(let e=0;e<vn.length;e++){const t=yn.taskDisplay(vn[e]);n.appendChild(t)}!function(){const n=document.querySelectorAll(".btn-delete-task");for(let e=0;e<n.length;e++){const t=n[e].dataset.key;gn().find((n=>n.key==t)),n[e].addEventListener("click",(function(){bn(t),vn=vn.filter((n=>n.key!=t)),wn()}))}}(),function(){const n=document.querySelectorAll(".project-link");for(let e=0;e<n.length;e++){const t=ln().find((t=>t.key==n[e].dataset.key));n[e].addEventListener("click",(function(){kn(fn(n[e].dataset.key),`${t.name}`),wn()}))}}(),function(){const n=document.querySelectorAll(".btn-priority");for(let e=0;e<n.length;e++)n[e].addEventListener("click",(function(){const t=n[e].parentNode.dataset.key,r=gn().find((n=>n.key==t)),o=vn.findIndex((n=>n.key==t));let a="";if(r.project&&(a=r.project.key),r.complete){bn(r.key);const n=hn(r.title,r.notes,r.dueDate,r.priority,a,!1,r.key);vn.splice(o,1,n)}else{bn(r.key);const n=hn(r.title,r.notes,r.dueDate,r.priority,a,!0,r.key);vn.splice(o,1,n)}wn()}))}(),function(){const n=document.querySelectorAll(".btn-edit-task");for(let e=0;e<n.length;e++){const t=n[e].dataset.key,r=gn().find((n=>n.key==t));n[e].addEventListener("click",(function(){xn(r)}))}}()}function xn(n){const e=document.querySelector("dialog"),t=yn.addTaskForm(n);e.textContent="",e.appendChild(t),document.querySelector("#cancel").addEventListener("click",(()=>e.close())),document.querySelector("#add-task-form").addEventListener("submit",(t=>{if(t.preventDefault(),n){const e=vn.findIndex((e=>e.key==n.key));bn(n.key);const t=hn(taskTitle.value,taskNotes.value,taskDueDate.value,taskPriority.value,taskProject.value,n.complete,n.key);vn.splice(e,1,t)}else{const n=mn(taskTitle.value,taskNotes.value,taskDueDate.value,taskPriority.value,taskProject.value);vn.push(n),n.project&&kn(fn(n.project.key),`${n.project.name}`)}wn(),e.close()})),e.showModal()}0==sn()&&0==un()&&Cn(),kn(gn(),"All Tasks"),wn(),Bn(),document.querySelector("#add-project").addEventListener("click",(function(){!function(){const n=document.querySelector("dialog"),e=yn.addProjectForm();n.textContent="",n.appendChild(e),document.querySelector("#cancel").addEventListener("click",(()=>n.close())),document.querySelector("#add-project-form").addEventListener("submit",(e=>{e.preventDefault();const t=cn(projectName.value);kn(fn(t.key),`${t.name}`),wn(),Bn(),n.close()})),n.showModal()}()})),document.querySelector("#add-task").addEventListener("click",(function(){xn()})),document.querySelector("#all-tasks").addEventListener("click",(function(){kn(gn(),"All Tasks"),wn()})),document.querySelector("#today").addEventListener("click",(function(){kn(function(){const n=on(new Date,"yyyy-MM-dd");let e=gn();return e=e.filter((e=>on(e.dueDate,"yyyy-MM-dd")==n)),e}(),"Today"),wn()})),document.querySelector("#overdue").addEventListener("click",(function(){kn(function(){const n=on(new Date,"yyyy-MM-dd");let e=gn();return e=e.filter((e=>on(e.dueDate,"yyyy-MM-dd")<n)),e}(),"Overdue"),wn()})),document.querySelector("#reset-demo-data").addEventListener("click",(function(){localStorage.clear(),Cn(),kn(gn(),"All Tasks"),Bn(),wn()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,